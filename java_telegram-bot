process.env.TZ = 'Moscow/Europe';
process.env.NTBA_FIX_319 = 1;
let trees = [
	{
		id: 1,
		name: "ü§ñ –ë–∞–≥—Ä–æ–≤—ã–π –¢–∞–π—Ñ—É–Ω  [1—É—Ä]",
		earn: 30,
		price: 15
	},
	{
		id: 2,
		name: "ü§ñ–ó–∞—â–∏—Ç–Ω–∏–∫ –ë—Ä–∞–≤–æ  [2—É—Ä]",
		earn: 25,
		price: 50
	},
	{
		id: 3,
		name: "ü§ñ –ö–æ–π–æ—Ç –¢–∞–Ω–≥–æ [3—É—Ä]",
		earn: 100, 
		price: 200
	},
	{
		id: 4,
		name: "ü§ñ –°—Ç–∞–ª—å–Ω–æ–π –§–µ–Ω–∏–∫—Å [4—É—Ä]",
		earn: 300,
		price: 422
	},
	{
		id: 5,
		name: "ü§ñ –°—Ç—Ä–∞–π–∫–µ –≠–≤—Ä–∏–∫–∞ [5—É—Ä]",
		earn: 500,
		price: 900
	},
	{
		id: 6,
		name: "ü§ñ –ß–µ—Ä–Ω—ã–π –ê–ª—å—Ñ–∞ [6—É—Ä]",
		earn: 1000,
		price: 1900
	},
	{
		id: 7,
		name: "ü§ñ –ë—Ä–æ–¥—è–≥–∞  [7—É—Ä]",
		earn: 2000,
		price: 3500
	}
];

const mongo = require('mongoose');
mongo.connect("mongodb://", { useNewUrlParser: true });

const ADMINS = [869672914, 886448876];

var User = mongo.model('User', {
	id: Number,
	buybalance: Number,
	outbalance: Number,
	fc: Number,
	ref: Number,
	regDate: String,
	trees: Array,
	deposit: Number,
	fetuses: Number,
	menu: String,
	lastCollect: Number
});

var Task = mongo.model('Task', {
	id: Number
});

const Ticket = mongo.model('Ticket', {
	id: Number,
	amount: Number,
	wallet: Number
})

const Start = [
	["üöó –ì–∞—Ä–∞–∂", "ü§ñ–ë–∞–∑–∞"],
	["üñ• –ú–æ–π –æ—Ñ–∏—Å", "üë• –ü–∞—Ä—Ç–Ω—ë—Ä—ã"],
	["üí¨ –ß–∞—Ç", "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"]
];

const Cancel = [
	["üö´ –û—Ç–º–µ–Ω–∞"]
];

const AdminPanel = [
	["üì¨ –†–∞—Å—Å—ã–ª–∫–∞", "üìÆ –í—ã–ø–ª–∞—Ç—ã"],
	["üìß –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"],
	["üîô –ù–∞–∑–∞–¥"]
];

const settings = {
    refovod_balance: 0.1 //–ø—Ä–æ—Ü–µ–Ω—Ç—ã —Å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
};

const { Qiwi } = require('node-qiwi-api');
const wallet = new ('Qiwi7038b33dedfe12539632cdd7b9793903');

const Telegram = require('node-telegram-bot-api');
const bot = new Telegram('903656291:AAFpf2ILtMFiHRlCv5Uveiqf-1qaKV7vci8', { polling: true });

bot.on('message', async (message) => {
	message.send = (text, params) => bot.sendMessage(message.chat.id, text, params);
	let $menu = [];

	Start.map((x) => $menu.push(x));
	if( ADMINS.find((x) => x == message.from.id) ) $menu.push(["üîù –ê–¥–º–∏–Ω–∫–∞"]);

	if(message.text) {
		if(message.text.startsWith('/start') || message.text == 'üîô –ù–∞–∑–∞–¥') {
			let $user = await User.findOne({ id: message.from.id });
			if( !$user ) {
				let schema = {
					id: message.from.id,
					buybalance: 0,
					outbalance: 0,
					fc: 0,
					ref: 0,
					regDate: `${new Date().getDate()}/${new Date().getMonth() + 1}/${new Date().getFullYear()}`,
					trees: [],
					deposit: 0,
					fetuses: 0,
					menu: "",
					lastCollect: Date.now()
				}

				let reffer = Number(message.text.split('/start ')[1]);

				if( reffer ) {
					let $reffer = await User.findOne({ id: reffer });
					if( $reffer ) {
						schema.ref = $reffer.id;
						await $reffer.inc('buybalance', 0.25);

						bot.sendMessage($reffer.id, `üîî –í—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ <a href="tg://user?id=${message.from.id}">–ø–∞—Ä—Ç–Ω—ë—Ä–∞</a> –∏ –ø–æ–ª—É—á–∏–ª–∏ 0.25‚ÇΩ`, { parse_mode: "HTML" });
					}
				}

				let user = new User(schema);
				await user.save();
			}

			return message.send('üëã –ü—Ä–∏–≤–µ—Ç, ' + message.from.first_name + '!', {
				reply_markup: {
					keyboard: $menu,
					resize_keyboard: true
				}
			});
		}
	}

	message.user = await User.findOne({ id: message.from.id });
	if(!message.user) return message.send(`–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –ù–∞–ø–∏—à–∏—Ç–µ /start`);

	if(message.text) {
		if(message.text == 'üö´ –û—Ç–º–µ–Ω–∞') {
			await message.user.set('menu', '');
			return message.send('üö´ –û—Ç–º–µ–Ω–µ–Ω–æ.', {
				reply_markup: {
					keyboard: $menu,
					resize_keyboard: true
				}
			});
		}
	}

	let { status } = await bot.getChatMember(-1001168219021, message.from.id);
	if(status === 'left') return message.send(`‚ûï *–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã* –Ω–∞—á–∞—Ç—å/–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º, *–≤—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º* –Ω–∞ –∫–∞–Ω–∞–ª https://t.me/officalnewsmedia –∏ –ø–æ—Å–ª–µ —ç—Ç–æ–π –Ω–∞–∂–∞—Ç—å –≤ –ª—é–±—É—é –∫–Ω–æ–ø–∫—É`, {
		parse_mode: 'Markdown',
		reply_markup: {
			inline_keyboard: [
				[{ text: '‚ûï –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', url: 'https://t.me/silent_payments' }]
			]
		}
	});	
	
	if(message.user.menu == 'reinvest') {
		message.text = Number(message.text);

		if(!message.text) return message.send('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è —Ä–µ–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!');
		if(message.text <= 0) return message.send('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è —Ä–µ–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!');

		if(message.text > message.user.outbalance) return message.send('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.');
		else if(message.text <= message.user.outbalance) {
			await message.user.set('menu', '');

			await message.user.dec('outbalance', message.text);
			await message.user.inc('buybalance', message.text);

			return message.send(`–í—ã —É—Å–ø–µ—à–Ω–æ —Ä–µ–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–ª–∏ ${message.text.toFixed(2)}‚ÇΩ`, {
				reply_markup: {
					keyboard: $menu,
					resize_keyboard: true
				}
			});
		}
	}

	if(message.user.menu.startsWith('amountQiwi')) {
		message.text = Number(message.text);

		if(!message.text) return message.send('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞ –≤—ã–≤–æ–¥!');
		if(message.text <= 0) return message.send('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞ –≤—ã–≤–æ–¥!');

		if(message.text > message.user.outbalance) return message.send('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.');

		if(message.text <= message.user.outbalance) {
			await message.user.dec('outbalance', message.text);

			let ticket = new Ticket({
				id: message.from.id,
				amount: message.text,
				wallet: Number(message.user.menu.split('amountQiwi')[1])
			});

			await ticket.save();
			await message.user.set('menu', '');

			return message.send('–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–ø–ª–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∞.', {
				reply_markup: {
					keyboard: $menu,
					resize_keyboard: true
				}
			});
		}
	}

	if(message.user.menu == 'qiwi') {
		message.text = Number(message.text);

		if(!message.text) return message.send('–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä!', {
			reply_markup: {
				keyboard: Cancel,
				resize_keyboard: true
			}
		});

		if(message.text < 70000000000) return message.send('–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä!', {
			reply_markup: {
				keyboard: Cancel,
				resize_keyboard: true
			}
		});

		await message.user.set('menu', 'amountQiwi' + message.text);
		return message.send(`–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞ –≤—ã–≤–æ–¥. –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ ${message.user.outbalance.toFixed(2)}‚ÇΩ`);
	}

	if(message.text) {
		if(message.text == 'ü§ñ –ö—É–ø–∏—Ç—å') {
			return message.send('–í—ã–±–µ—Ä–∏—Ç–µ, –∫—É–¥–∞ –∑–∞–π—Ç–∏.', {
				reply_markup: {
					inline_keyboard: [
						[
							{ text: "üõí –ú–∞–≥–∞–∑–∏–Ω", callback_data: "trees:shop1" }
						], [
							{ text: "üöò –ú–æ–π –ï–≥–µ—Ä—å", callback_data: "trees:inv1" }
						]
					]
				}
			});
		}

		if(message.text == 'üè¨ –ë–∞–∑–∞') {
			return message.send(`–í —Ä–∞–∑–¥–µ–ª–µ <b>üè¨ –ë–∞–∑–∞</b> –≤—ã —Å–º–æ–∂–µ—Ç–µ –æ–±–º–µ–Ω—è—Ç—å <b>üí∏ –¥–æ–±—ã—á—É</b> –Ω–∞ <b>‚ÇΩ —Ä—É–±–ª–∏</b>.

1000 üí∏  = 1 —Ä—É–±–ª—å
–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –æ–±–º–µ–Ω–∞: 1000 —É–±–∏–π—Å—Ç–≤

üí∏ <b>–í–∞—à–∏ —ç–Ω–µ—Ä–≥–∏—è –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç:</b> ${message.user.fetuses.toFixed(2)}

–ü–æ—Å–ª–µ –æ–±–º–µ–Ω–∞ 50% –ø–æ–ø–∞–¥–∞–µ—Ç –Ω–∞ –±–∞–ª–∞–Ω—Å –¥–ª—è –ø–æ–∫—É–ø–æ–∫, –∞ –æ—Å—Ç–∞–ª—å–Ω—ã–µ 50% –Ω–∞ –±–∞–ª–∞–Ω—Å –¥–ª—è –≤—ã–≤–æ–¥–∞.`, {
				parse_mode: "HTML",
				reply_markup: {
					inline_keyboard: [
						[{ text: "üîÑ –û–±–º–µ–Ω—è—Ç—å", callback_data: "exchange" }]
					]
				}
			});
		}

		if(message.text == 'üñ• –ú–æ–π –æ—Ñ–∏—Å') {
			return message.send(`üìù –ò–º—è: <b>${message.from.first_name.replace(/(\<|\>)/g, '')}</b>

üÜî ID: <code>${message.from.id}</code>

üõí –ù–∞ –ø–æ–∫—É–ø–∫–∏: ${message.user.buybalance.toFixed(2)}‚ÇΩ
üì≠ –ù–∞ –≤—ã–≤–æ–¥: ${message.user.outbalance.toFixed(2)}‚ÇΩ

üöò –ú–æ–π –ï–≥–µ—Ä—å: <b>${message.user.trees.length}</b>`, {
				parse_mode: "HTML",
				reply_markup: {
					inline_keyboard: [
						[{ text: "üì• –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data: "deposit" }, { text: "üì§ –í—ã–≤–µ—Å—Ç–∏", callback_data: "withdraw" }],
						[{ text: "‚ôªÔ∏è –†–µ–∏–Ω–≤–µ—Å—Ç", callback_data: "reinvest" }, { text: "üöò –ú–æ–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—ã", callback_data: "trees:totalMy" }]
					]
				}
			});
		}

		if(message.text == 'üë• –ü–∞—Ä—Ç–Ω—ë—Ä—ã') {
			let partners = await User.find({ ref: message.from.id });
			return message.send(`<b>üéâ –í—ã –º–æ–∂–µ—Ç–µ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å —Å –ø–æ–º–æ—â—å—é –Ω–∞—à–µ–π –ø–∞—Ä—Ç–Ω—ë—Ä—Å–∫–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã!

	üí∂ –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –ø–æ —Å—Å—ã–ª–∫–µ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ —Å —ç—Ç–æ–≥–æ –ø—Ä–∏–±—ã–ª—å!

	üîë –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 10% —Å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π –≤–∞—à–∏—Ö –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤ –∏ 0.25‚ÇΩ –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø–∞—Ä—Ç–Ω—ë—Ä–∞.</b>

	üîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞: https://t.me/Taxi_moneu_Bot?start=${message.from.id}

	üéä <b>–í—ã —É–∂–µ –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏:</b> ${ partners.length }`, {
				parse_mode: "HTML",
				reply_markup: {
              inline_keyboard: [
               [{text: "üîù –¢–æ–ø —Ä–µ—Ñ–æ–≤–æ–¥–æ–≤", callback_data: "reftop"}]
                  ]
                }
			});
		}

		if(message.text == 'üí¨ –ß–∞—Ç') {
			return message.send(`–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ
			
1Ô∏è‚É£ –í—Å—Ç—É–ø–∞–π—Ç–µ –≤ –Ω–∞—à —á–∞—Ç —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π –∏–≥—Ä—ã.
2Ô∏è‚É£ –ß–∞—Å—Ç–æ —Ä–∞–∑–≥—Ä–∞–µ–º –∫–æ–Ω–∫—É—Ä—Å—ã –≤ —á–∞—Ç–µ, –ø—Ä–∏–∑–æ–≤ –µ–≥–µ—Ä–µ–π –ª–∏–±–æ –¥—Ä—É–≥–∏–µ –∫–æ–Ω–∫—É—Ä—Å—ã –ø–æ–ª–µ–∑–Ω—ã—Ö.`, {
				parse_mode: "HTML",
				reply_markup: {
					inline_keyboard: [
						[{ text: "üí¨ –ß–∞—Ç", url: "https://t.me/quiet_chat_bota" }],
					]
				}
			});
		}

		if(message.text == 'üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞') {
			let stats = {
				users: await User.countDocuments(),
				users_today: await User.find({ regDate: `${new Date().getDate()}/${new Date().getMonth() + 1}/${new Date().getFullYear()}` }),
				cmds: message.message_id
			}

			stats.users_today = stats.users_today.length;

			return message.send(`üë®‚Äçüíª –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∏–≥—Ä–µ: ${stats.users}
üë®‚Äçüíª –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–µ–≥–æ–¥–Ω—è: ${stats.users_today}
üöÄ –ö–æ–º–∞–Ω–¥ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${stats.cmds}`);
		}
	}

	if(ADMINS.indexOf(message.from.id) !== -1) {
		if(message.text == 'üîù –ê–¥–º–∏–Ω–∫–∞') {
			return message.send('üîù –ê–¥–º–∏–Ω–∫–∞', {
				reply_markup: {
					keyboard: AdminPanel,
					resize_keyboard: true
				}
			});
		}

		if(message.text.startsWith('/setbuybalance')) {
			let cmd = message.text.split(' ');
			if(!cmd[1]) return message.send('–û—à–∏–±–∫–∞!');

			let user = await User.findOne({ id: Number(cmd[1]) });
			if(!user) return message.send('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!');

			await user.set('buybalance', Number(cmd[2]));
			return message.send('–ë–∞–ª–∞–Ω—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.');
		}

		if(message.text.startsWith('/setoutbalance')) {
			let cmd = message.text.split(' ');
			if(!cmd[1]) return message.send('–û—à–∏–±–∫–∞!');

			let user = await User.findOne({ id: Number(cmd[1]) });
			if(!user) return message.send('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!');

			await user.set('outbalance', Number(cmd[2]));
			return message.send('–ë–∞–ª–∞–Ω—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.');
		}

		if(message.user.menu == 'mailing') {
			message.send('–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...', {
				reply_markup: {
					keyboard: $menu,
					resize_keyboard: true
				}
			});

			await message.user.set('menu', '');

			let users = await User.find();

			await users.map((user) => {
				if(message.photo) {
					bot.sendPhoto(user.id, message.photo[message.photo.length - 1].file_id, { caption: message.caption, parse_mode: "HTML", disable_web_page_preview: true });
				}

				if(message.audio) {
					bot.sendAudio(user.id, message.audio.file_id, { caption: message.caption, parse_mode: "HTML", disable_web_page_preview: true });
				}

				if(message.voice) {
					bot.sendVoice(user.id, message.voice.file_id, { caption: message.caption, parse_mode: "HTML", disable_web_page_preview: true });
				}

				if(message.video) {
					bot.sendVideo(user.id, message.video.file_id, { caption: message.caption, parse_mode: "HTML", disable_web_page_preview: true });
				}

				if(message.video_note) {
					bot.sendVideoNote(user.id, message.video_note.file_id, { caption: message.caption, parse_mode: "HTML", disable_web_page_preview: true });
				}

				if(message.document) {
					bot.sendDocument(user.id, message.document.file_id, { caption: message.caption, parse_mode: "HTML", disable_web_page_preview: true });
				}

				if(message.text) {
					bot.sendMessage(user.id, message.text, {
						parse_mode: "HTML",
						disable_web_page_preview: true
					});
				}
			});

			return message.send('–†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.');
		}

		if(message.user.menu == 'info') {
			message.text = Number(message.text);
			let user = await User.findOne({ id: message.text });

			if(!user) return message.send('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.', {
				reply_markup: {
					keyboard: Cancel,
					resize_keyboard: true
				}
			});

			let partners = await User.find({ ref: message.text });
			await message.user.set('menu', '');

			return message.send(`üìù –ü—Ä–∏–≥–ª–∞—Å–∏–ª: <b>${partners.length}</b>

üÜî ID: <code>${user.id}</code>

üí∞ –ë–∞–ª–∞–Ω—Å
üõí –î–ª—è –ø–æ–∫—É–ø–æ–∫: ${user.buybalance.toFixed(2)}‚ÇΩ
üì≠ –î–ª—è –≤—ã–≤–æ–¥–∞: ${user.outbalance.toFixed(2)}‚ÇΩ

üöò –ú–æ–π –ï–≥–µ—Ä—å: <b>${user.trees.length}</b>

<b>–ü–æ–ø–æ–ª–Ω–∏–ª: ${user.deposit}‚ÇΩ</b>`, {
				parse_mode: "HTML",
				reply_markup: {
					keyboard: $menu,
					resize_keyboard: true
				}
			});
		}

		if(message.text == 'üì¨ –†–∞—Å—Å—ã–ª–∫–∞') {
			await message.user.set('menu', 'mailing');
			return message.send('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏.', {
				reply_markup: {
					keyboard: Cancel,
					resize_keyboard: true
				}
			});
		}

		if(message.text == 'üìÆ –í—ã–ø–ª–∞—Ç—ã') {
			wallet.getBalance(async (err, { accounts }) => {
				await message.send(`–ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞ –∞–¥–º–∏–Ω–∞: ${accounts[0].balance.amount}‚ÇΩ`);
			});

			let tickets = await Ticket.find();
			if(tickets.length == 0) return message.send('–ó–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥ –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª–æ.');

			await tickets.map((x) => {
				message.send(`üìù –ò–≥—Ä–æ–∫: <a href="tg://user?id=${x.id}">–ò–≥—Ä–æ–∫</a> (ID: <code>${x.id}</code>)

üí∞ –°—É–º–º–∞: ${x.amount}‚ÇΩ`, {
					parse_mode: "HTML",
					reply_markup: {
						inline_keyboard: [
							[{ text: 'üì≠ –í—ã–≤–µ—Å—Ç–∏', callback_data: `withdraw:${x.id}` }],
							[{ text: '‚ôªÔ∏è –í–µ—Ä–Ω—É—Ç—å', callback_data: `back:${x.id}` }],
							[{ text: 'üö´ –ó–∞–±—Ä–∞—Ç—å', callback_data: `take:${x.id}` }]
						]
					}
				});
			});
		}

		if(message.text == 'üìß –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è') {
			await message.user.set('menu', 'info');
			return message.send('–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', {
				reply_markup: {
					keyboard: Cancel,
					resize_keyboard: true
					}
			});
		}
	}

});
				
bot.on('callback_query', async (query) => {
	const { message } = query;
	message.user = await User.findOne({ id: message.chat.id });

	if(!message.user) return bot.answerCallbackQuery(query.id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...', true);

	if(query.data == 'none') return bot.answerCallbackQuery(query.id, '–ü—Ä–∏–≤–µ—Ç! :)', true);

	if(query.data.startsWith('trees:shop')) {
		let id = Number(query.data.split('trees:shop')[1]);

		let tree = trees.find((x) => x.id == id);
		if(!tree) return bot.answerCallbackQuery(query.id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...', true);

		bot.editMessageText(`ü§µ–ù–∞–∑–≤–∞–Ω–∏–µ: ${tree.name}
		
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${tree.price}‚ÇΩ
‚öîÔ∏è –£–±–∏–π—Å—Ç–≤ –≤ —á–∞—Å: ${tree.earn}`, {
					chat_id: message.chat.id,
					message_id: message.message_id,
					parse_mode: "HTML",
					reply_markup: {
						inline_keyboard: [
							[
								{ text: getNavigationIcon(1, tree.id), callback_data: getNavigationQuery(1, tree.id) },
								{ text: getNavigationIcon(2, tree.id), callback_data: getNavigationQuery(2, tree.id)  },
								{ text: getNavigationIcon(3, tree.id), callback_data: getNavigationQuery(3, tree.id)  },
								{ text: getNavigationIcon(4, tree.id), callback_data: getNavigationQuery(4, tree.id)  },
								{ text: getNavigationIcon(5, tree.id), callback_data: getNavigationQuery(5, tree.id)  },
								{ text: getNavigationIcon(6, tree.id), callback_data: getNavigationQuery(6, tree.id)  },
								{ text: getNavigationIcon(7, tree.id), callback_data: getNavigationQuery(7, tree.id)  }
				
							],
							[
								{ text: `‚ûï –ö—É–ø–∏—Ç—å –∑–∞ ${tree.price}‚ÇΩ`, callback_data: `trees:buy${tree.id}` }
							]
						]
					}
				});
	}
	
	if (query.data.startsWith("reftop")){
        let refs = [];
        let users = await User.find({ref: {$gt: 0}});//.where('ref').not.exec();

        users.forEach(function(user) {
            let found = false;
            refs.forEach(ref=>{
                if (ref.id === user.ref) {
                    found = true;
                }
            });
            if (!found) {
                refs.push({
                    id: user.ref,
                    refs: 0
                });
            }
            refs.forEach(ref=>{
                if (ref.id === user.ref) ref.refs++;
            });
        });
        refs = refs.sort(function (a, b) {
            return b.refs - a.refs
        });
        let text = "üîù –¢–æ–ø —Ä–µ—Ñ–æ–≤–æ–¥–æ–≤\n\n";
        refs.forEach(function(ref, i){
            let emodzi = ["ü•á", "ü•à", "ü•â", "4Ô∏è‚É£", "5Ô∏è‚É£", "6Ô∏è‚É£", "7Ô∏è‚É£", "8Ô∏è‚É£", "9Ô∏è‚É£", "üîü"];
            if(i < 10){
                text += `${emodzi[i]} ${ref.refs} —á–µ–ª–æ–≤–µ–∫ - <a href="tg://user?id=${ref.id}">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a>
`;
            }
        });


        bot.editMessageText(text, {
            chat_id: message.chat.id,
            message_id: message.message_id,
            parse_mode: "HTML"
        });
    }

	if(query.data.startsWith('trees:inv')) {
		let id = Number(query.data.split('trees:inv')[1]);

		let tree = trees.find((x) => x.id == id);
		if(!tree) return bot.answerCallbackQuery(query.id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...', true);

		let total_balance = 0;

		message.user.trees.map((x) => {
			total_balance += ( ( ( Date.now() - message.user.lastCollect ) / 1000 ) / 50 ) * ( trees.find((a) => a.id == x.id).earn / 50 );
		});

		let count = message.user.trees.filter((x) => x.id == tree.id).length;
		let earn = count * tree.earn;

		bot.editMessageText(`ü§µ–ù–∞–∑–≤–∞–Ω–∏–µ: ${tree.name} (${count}x)
		
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${tree.price}‚ÇΩ
‚öîÔ∏è –£–±–∏–π—Å—Ç–≤ –≤ —á–∞—Å: ${earn}`, {
			chat_id: message.chat.id,
			message_id: message.message_id,
			parse_mode: "HTML",
			reply_markup: {
				inline_keyboard: [
					[
						{ text: getInventoryIcon(1, tree.id), callback_data: getInventoryQuery(1, tree.id) },
						{ text: getInventoryIcon(2, tree.id), callback_data: getInventoryQuery(2, tree.id)  },
						{ text: getInventoryIcon(3, tree.id), callback_data: getInventoryQuery(3, tree.id)  },
						{ text: getInventoryIcon(4, tree.id), callback_data: getInventoryQuery(4, tree.id)  },
						{ text: getInventoryIcon(5, tree.id), callback_data: getInventoryQuery(5, tree.id)  },
						{ text: getInventoryIcon(6, tree.id), callback_data: getInventoryQuery(6, tree.id)  },
						{ text: getInventoryIcon(7, tree.id), callback_data: getInventoryQuery(7, tree.id)  }
						
					],
					[
						{ text: `‚ûï –°–æ–±—Ä–∞—Ç—å ${total_balance.toFixed(2)}üí∏`, callback_data: `trees:collect` }
					]
				]
			}
		});
	}

	if(query.data.startsWith('trees:buy')) {
		let id = Number(query.data.split('trees:buy')[1]);

		let tree = trees.find((x) => x.id == id);
		if(!tree) return bot.answerCallbackQuery(query.id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...', true);

		if(tree.price > message.user.buybalance) return bot.answerCallbackQuery(query.id, 'üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è –ø–æ–∫—É–ø–∫–∏.', true);
		else if(tree.price <= message.user.buybalance) {
			await message.user.dec('buybalance', tree.price);
			await message.user.trees.push({ id: tree.id, date: Date.now(), lastCollect: Date.now() });

			await message.user.save();
			return bot.answerCallbackQuery(query.id, `‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ ${tree.name} –∑–∞ ${tree.price}‚ÇΩ`, true);
		}
	}

	if(query.data == 'exchange') {
		if(message.user.fetuses < 1000) return bot.answerCallbackQuery(query.id, 'üö´ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –æ–±–º–µ–Ω–∞: 1000üí∏', true);
		
		let { fetuses } = message.user;
		await message.user.set('fetuses', 0);
		
		fetuses = fetuses / 1000;

		await message.user.inc('buybalance', fetuses / 2);
		await message.user.inc('outbalance', fetuses / 2);

		bot.deleteMessage(message.chat.id, message.message_id);
		return bot.answerCallbackQuery(query.id, `‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –æ–±–º–µ–Ω—è–ª–∏ ${( fetuses * 1000 ).toFixed(2)} üí∏ –Ω–∞ ${fetuses.toFixed(2)}üíé`, true);
	}

	if(query.data == 'deposit') {
		await bot.sendMessage(message.chat.id, `ü•ù –°–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: QIWI

üåê –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±—É—é —Å—É–º–º—É –Ω–∞ –∫–æ—à–µ–ª–µ–∫ <code>+79502727338</code>
‚ÄºÔ∏è —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º <code>minergame${message.chat.id}</code>`, {
			parse_mode: "HTML"
		});

		return bot.sendMessage(message.chat.id, `<code>minergame${message.chat.id}</code>`, {
			parse_mode: "HTML"
		});
	}

	if(query.data == 'withdraw') {
		if(message.user.outbalance < 25) return bot.answerCallbackQuery(query.id, 'üö´ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: 25‚ÇΩ', true);
		bot.deleteMessage(message.chat.id, message.message_id);

		await message.user.set('menu', 'qiwi');
		await bot.sendMessage(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä QIWI –¥–ª—è –≤—ã–≤–æ–¥–∞.\n–û–±—Ä–∞–∑–µ—Ü (–ø—Ä–∏–º–µ—Ä): 79534924977, –Ω–æ–º–µ—Ä —É–∫–∞–∑—ã–≤–∞–π—Ç–µ –≤–µ—Ä–Ω–æ, –±–µ–∑ –æ—à–∏–±–æ–∫.', {
			reply_markup: {
				keyboard: Cancel,
				resize_keyboard: true
			}
		});
	}

	if(query.data == 'reinvest') {
		await message.user.set('menu', 'reinvest');
		return bot.sendMessage(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —Ä–µ–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å.', {
			reply_markup: {
				keyboard: Cancel,
				resize_keyboard: true
			}
		});
	}

	if(query.data == 'trees:collect') {
		let total_balance = 0;

		message.user.trees.map((x) => {
			if(( ( ( Date.now() - message.user.lastCollect ) / 1000 ) / 50 ) * ( trees.find((a) => a.id == x.id).earn / 50 ) > ( trees.find((a) => a.id == x.id).earn * 72)) {
				total_balance += trees.find((a) => a.id == x.id).earn * 72;
			} else {
				total_balance += ( ( ( Date.now() - message.user.lastCollect ) / 1000 ) / 50 ) * ( trees.find((a) => a.id == x.id).earn / 50 );
			}
		});

		await message.user.set('lastCollect', Date.now());

		await bot.deleteMessage(message.chat.id, message.message_id);
		await message.user.inc('fetuses', Number(total_balance.toFixed(2)));

		return bot.answerCallbackQuery(query.id, `–í—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–ª–∏ ${total_balance.toFixed(2)}üí∏`, true);
	}

	if(query.data == 'trees:totalMy') {
		let $trees = [];
		let total_earn = 0;

		message.user.trees.map((x) => {
			$trees.push(x.id);
			total_earn += trees.find((a) => a.id == x.id).earn
		});

		let text = ``;

		if( $trees.filter((x) => x === 1).length ) {
			text += `\n\nü§µ <b>${trees.find((x) => x.id == 1).name}</b>\n\t\t‚ñ´Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${$trees.filter((x) => x === 1).length}\n\t\t‚ñ™Ô∏è –£–±–∏–π—Å—Ç–≤ –≤ —á–∞—Å: ${$trees.filter((x) => x === 1).length * trees.find((x) => x.id == 1).earn}`;
		}

		if( $trees.filter((x) => x === 2).length ) {
			text += `\n\nü§µ <b>${trees.find((x) => x.id == 2).name}</b>\n\t\t‚ñ´Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${$trees.filter((x) => x === 2).length}\n\t\t‚ñ™Ô∏è –£–±–∏–π—Å—Ç–≤ –≤ —á–∞—Å: ${$trees.filter((x) => x === 2).length * trees.find((x) => x.id == 2).earn}`;
		}

		if( $trees.filter((x) => x === 3).length ) {
			text += `\n\nü§µ <b>${trees.find((x) => x.id == 3).name}</b>\n\t\t‚ñ´Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${$trees.filter((x) => x === 3).length}\n\t\t‚ñ™Ô∏è –£–±–∏–π—Å—Ç–≤ –≤ —á–∞—Å: ${$trees.filter((x) => x === 3).length * trees.find((x) => x.id == 3).earn}`;
		}

		if( $trees.filter((x) => x === 4).length ) {
			text += `\n\nü§µ <b>${trees.find((x) => x.id == 4).name}</b>\n\t\t‚ñ´Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${$trees.filter((x) => x === 4).length}\n\t\t‚ñ™Ô∏è –£–±–∏–π—Å—Ç–≤ –≤ —á–∞—Å: ${$trees.filter((x) => x === 4).length * trees.find((x) => x.id == 4).earn}`;
		}

		if( $trees.filter((x) => x === 5).length ) {
			text += `\n\nü§µ <b>${trees.find((x) => x.id == 5).name}</b>\n\t\t‚ñ´Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${$trees.filter((x) => x === 5).length}\n\t\t‚ñ™Ô∏è –£–±–∏–π—Å—Ç–≤ –≤ —á–∞—Å: ${$trees.filter((x) => x === 5).length * trees.find((x) => x.id == 5).earn}`;
		}

		if( $trees.filter((x) => x === 6).length ) {
			text += `\n\nü§µ <b>${trees.find((x) => x.id == 6).name}</b>\n\t\t‚ñ´Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${$trees.filter((x) => x === 6).length}\n\t\t‚ñ™Ô∏è –£–±–∏–π—Å—Ç–≤ –≤ —á–∞—Å: ${$trees.filter((x) => x === 6).length * trees.find((x) => x.id == 6).earn}`;
		}

		if( $trees.filter((x) => x === 7).length ) {
			text += `\n\nü§µ <b>${trees.find((x) => x.id == 7).name}</b>\n\t\t‚ñ´Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${$trees.filter((x) => x === 7).length}\n\t\t‚ñ™Ô∏è –£–±–∏–π—Å—Ç–≤ –≤ —á–∞—Å: ${$trees.filter((x) => x === 7).length * trees.find((x) => x.id == 7).earn}`;
		}

		return bot.editMessageText(`ü§µ –°–ø–∏—Å–æ–∫ –≤–∞—à–∏ –≤–∏–¥–µ–æ–∫–∞—Ä—Ç: ‚§µÔ∏è${text}\n\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\nüìä –°—É–º–º–∞—Ä–Ω—ã–π —É–±–∏–π—Å—Ç–≤ –≤ —á–∞—Å: ${total_earn.toFixed(2)}üí∏`, {
			parse_mode: "HTML",
			chat_id: message.chat.id,
			message_id: message.message_id
		});
	}

	if(query.data == 'checkFollow') {
		let task = await Task.findOne({ id: message.chat.id });
		if(task) return bot.deleteMessage(message.chat.id, message.message_id);

		bot.getChatMember(-1001286701099, message.chat.id).then(async (res) => {
			if(res.status == 'left') return bot.answerCallbackQuery(query.id, 'üö´ –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã!');

			message.user.trees.push({
				id: 1,
				date: Date.now(),
				lastCollect: Date.now()
			});

			await message.user.save();

			let $task = new Task({
				id: message.chat.id
			});

			await $task.save();

			return bot.editMessageText('–í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –∑–∞–¥–∞–Ω–∏–µ –∏ –ø–æ–ª—É—á–∏–ª–∏ <b>üìÄ –í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞ GetForce 210</b>.', {
				parse_mode: "HTML",
				chat_id: message.chat.id,
				message_id: message.message_id
			});
		});
	}

	if(query.data.startsWith('withdraw:')) {
		let id = Number(query.data.split('withdraw:')[1]);
		let ticket = await Ticket.findOne({ id });

		if(!ticket) bot.deleteMessage(message.chat.id, message.message_id);

		wallet.toWallet({ account: String(ticket.wallet), amount: ticket.amount, comment: '@Taxi_Moneu_Bot | –ö–∞–Ω–∞–ª: @new_news_work | –í—ã–ø–ª–∞—Ç: @silent_payments'.}, () => {});
		bot.sendMessage(ticket.id, `–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–∞, –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –≤–∞—à QIWI ${ticket.amount}‚ÇΩ`);

		await ticket.remove();
		return bot.editMessageText('–í—ã–ø–ª–∞—Ç–∏–ª!', {
			chat_id: message.chat.id,
			message_id: message.message_id
		});
	}

	if(query.data.startsWith('back:')) {
		let id = Number(query.data.split('back:')[1]);
		let ticket = await Ticket.findOne({ id });

		if(!ticket) bot.deleteMessage(message.chat.id, message.message_id);

		let user = await User.findOne({ id: ticket.id });
		bot.sendMessage(ticket.id, `–í–∞—à–∞ –≤—ã–ø–ª–∞—Ç–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω, –Ω–∞ –≤–∞—à —Å—á—ë—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ ${ticket.amount}üíé`);

		await user.inc('buybalance', ticket.amount);
		await ticket.remove();

		return bot.editMessageText('–í–µ—Ä–Ω—É–ª!', {
			chat_id: message.chat.id,
			message_id: message.message_id
		});
	}

	if(query.data.startsWith('take:')) {
		let id = Number(query.data.split('take:')[1]);
		let ticket = await Ticket.findOne({ id });

		if(!ticket) bot.deleteMessage(message.chat.id, message.message_id);

		await ticket.remove();
		return bot.editMessageText('–ó–∞–±—Ä–∞–ª!', {
			chat_id: message.chat.id,
			message_id: message.message_id
		});
	}
});

User.prototype.inc = function(field, value = 1) {
	this[field] += value;
	return this.save();
}

User.prototype.dec = function(field, value = 1) {
	this[field] -= value;
	return this.save();
}

User.prototype.set = function(field, value) {
	this[field] = value;
	return this.save();
}

function getNavigationIcon(id, tree_id) {
	if(id == tree_id) return 'üîµ';
	else {
		if(id == 1) return '1Ô∏è‚É£';
		if(id == 2) return '2Ô∏è‚É£';
		if(id == 3) return '3Ô∏è‚É£';
		if(id == 4) return '4Ô∏è‚É£';
		if(id == 5) return '5Ô∏è‚É£';
		if(id == 6) return '6Ô∏è‚É£';
		if(id == 7) return '7Ô∏è‚É£';
		
	}
}

function getNavigationQuery(id, tree_id) {
	if(id == tree_id) return 'none';
	else {
		if(id == 1) return 'trees:shop1';
		if(id == 2) return 'trees:shop2';
		if(id == 3) return 'trees:shop3';
		if(id == 4) return 'trees:shop4';
		if(id == 5) return 'trees:shop5';
		if(id == 6) return 'trees:shop6';
		if(id == 7) return 'trees:shop7';
		
	}
}

function getInventoryIcon(id, tree_id) {
	if(id == tree_id) return 'üî¥';
	else {
		if(id == 1) return '1Ô∏è‚É£';
		if(id == 2) return '2Ô∏è‚É£';
		if(id == 3) return '3Ô∏è‚É£';
		if(id == 4) return '4Ô∏è‚É£';
		if(id == 5) return '5Ô∏è‚É£';
		if(id == 6) return '6Ô∏è‚É£';
		if(id == 7) return '7Ô∏è‚É£';
		
	}
}

function getInventoryQuery(id, tree_id) {
	if(id == tree_id) return 'none';
	else {
		if(id == 1) return 'trees:inv1';
		if(id == 2) return 'trees:inv2';
		if(id == 3) return 'trees:inv3';
		if(id == 4) return 'trees:inv4';
		if(id == 5) return 'trees:inv5';
		if(id == 6) return 'trees:inv6';
		if(id == 7) return 'trees:inv7';
		
	}
}

var new_txid;
var last_txid;

setInterval(async function () {
    try {
            wallet.getOperationHistory({ rows: 5, operation: "IN", sources: ['QW_RUB'] }, async (err, operations) => {
                if (err === null) {
                    new_txid = operations.data[0].txnId;
                    if (new_txid !== last_txid && last_txid !== undefined) {
						var user_id = operations.data[0].comment;
                        if (user_id.substr(0, 9) == "minergame") {
                            user_id = user_id.split("minergame")[1];
							var orderAmountNow = operations.data[0].sum.amount;

							var user_ids = await User.findOne({ id: Number(user_id) });
							if (user_ids.ref) {
                                User.findOne({id: user_ids.ref}).then(async (refovod) => {
                                    await refovod.inc("buybalance", orderAmountNow * settings.refovod_balance);
                                    bot.sendMessage(refovod.id, `üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ ${(orderAmountNow * settings.refovod_balance).toFixed(2)} —Ä—É–±–ª–µ–π –∑–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –≤–∞—à–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞`, {parse_mode: "HTML"}).catch();
                                });
							}else{			
							await user_ids.inc('deposit', orderAmountNow);
							await user_ids.inc('buybalance', orderAmountNow);
							}
							
							bot.sendMessage(user_ids.id, `–í—ã –ø–æ–ø–æ–ª–Ω–∏–ª–∏ —Å–≤–æ–π –±–∞–ª–∞–Ω—Å –Ω–∞ ${orderAmountNow}—Ä`);
							ADMINS.map((a) => bot.sendMessage(a, `<a href="tg://user?id=${user_ids.id}">–ò–≥—Ä–æ–∫</a> —Å–¥–µ–ª–∞–ª –¥–µ–ø–æ–∑–∏—Ç: ${orderAmountNow}‚ÇΩ\n`, { parse_mode: "HTML" }))
                        }
                    }
                }
            });
            last_txid = new_txid;
    }
    finally { }
}, 30000);

